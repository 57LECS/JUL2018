// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Foundation;
//using Google.Maps;
using UIKit;
using Mapbox;
using CoreLocation;
using Lasallistas.Models;
using System.Collections.Generic;

namespace Lasallistas.iOS
{
	public partial class MapViewController : UIViewController, IMGLMapViewDelegate
    {
        MGLMapView mGLMap;
        bool isCanchasShowing=true;
        bool isBaniosShowing=true;
        bool isAsistenciasShowing=true;
        bool isCafeteriasShowing=true;

        List<Cancha> Canchas;
        List<Lugares> Banios;
        List<Lugares> Asistencias;
        List<Lugares> Cafeterias;

        List<MGLPointAnnotation> CanchasMarkers;
        List<MGLPointAnnotation> BaniosMarkers;
        List<MGLPointAnnotation> AsistenciasMarkers;
        List<MGLPointAnnotation> CafeteriasMarkers;


        public MapViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();


            var documentAsistencia = AppDelegate.dbFirestore.GetCollection("eventos/oct2018/canchas");
            var documentBanio = AppDelegate.dbFirestore.GetCollection("eventos/oct2018/canchas");
            var documentCancha = AppDelegate.dbFirestore.GetCollection("eventos/oct2018/canchas");
            var documentCafe = AppDelegate.dbFirestore.GetCollection("eventos/oct2018/canchas");
            MapConfiguration();
            documentAsistencia.GetDocuments(AsistenciaQuerySnapshotHandler);
            documentCancha.GetDocuments(BanioQuerySnapshotHandler);
            documentBanio.GetDocuments(AsistenciaQuerySnapshotHandler);
            documentCafe.GetDocuments(CafeteriaQuerySnapshotHandler);

        }

        partial void btnAsistenciaTouchUpInside(NSObject sender)
        {
            isAsistenciasShowing = !isAsistenciasShowing;
            PutMapMarkers(1);
        }

        partial void btnBa√±osTouchUpInside(NSObject sender)
        {
            isBaniosShowing = !isBaniosShowing;
            PutMapMarkers(2);
        }

        partial void btnCanchasTouchUpInside(NSObject sender)
        {
            isCanchasShowing = !isCanchasShowing;
            PutMapMarkers(3);
        }

        partial void btnCafeteriasTouchUpInside(NSObject sender)
        {
            isCafeteriasShowing = !isCafeteriasShowing;
            PutMapMarkers(4);
        }

        void MapConfiguration()
        {
            var url = new NSUrl("mapbox://styles/mapbox/streets-v10");
            var mapViewView = new MGLMapView(View.Bounds, url);
            mapViewView.StyleURL = MGLStyle.DarkStyleURL;
            mapViewView.AutoresizingMask = UIViewAutoresizing.FlexibleDimensions;
            mapViewView.SetCenterCoordinate(new CLLocationCoordinate2D(21.152212, -101.711294), 15, false);
            View.AddSubview(mapViewView);
            mGLMap = mapViewView;
            View.BringSubviewToFront(ButtonsStackView);
        }


        /// <summary>
        /// Puts the map markers.
        /// Sender 5 to clear map and 6 to show all markers
        /// </summary>
        /// <param name="sender">Sender.</param>
        void PutMapMarkers(int sender)
        {
            switch (sender)
            {
                case 1:
                    if (isAsistenciasShowing)
                        mGLMap.AddAnnotations(AsistenciasMarkers.ToArray());
                    else
                        mGLMap.RemoveAnnotations(AsistenciasMarkers.ToArray());
                    break;

                case 2:
                    if (isBaniosShowing)
                        mGLMap.AddAnnotations(BaniosMarkers.ToArray());
                    else
                        mGLMap.RemoveAnnotations(BaniosMarkers.ToArray());
                    break;

                case 3:
                    if (isCanchasShowing)
                        mGLMap.AddAnnotations(CanchasMarkers.ToArray());
                    else
                        mGLMap.RemoveAnnotations(CanchasMarkers.ToArray());
                    break;

                case 4:
                    if (isCafeteriasShowing)
                        mGLMap.AddAnnotations(CafeteriasMarkers.ToArray());
                    else
                        mGLMap.RemoveAnnotations(CafeteriasMarkers.ToArray());
                    break;

                case 5:
                    mGLMap.RemoveAnnotations(AsistenciasMarkers.ToArray());
                    mGLMap.RemoveAnnotations(BaniosMarkers.ToArray());
                    mGLMap.RemoveAnnotations(CanchasMarkers.ToArray());
                    mGLMap.RemoveAnnotations(CafeteriasMarkers.ToArray());
                    break;

                default:
                    PutMapMarkers(5);
                    mGLMap.AddAnnotations(AsistenciasMarkers.ToArray());
                    mGLMap.AddAnnotations(BaniosMarkers.ToArray());
                    mGLMap.AddAnnotations(CanchasMarkers.ToArray());
                    mGLMap.AddAnnotations(CafeteriasMarkers.ToArray());
                    isAsistenciasShowing = isBaniosShowing = isCanchasShowing = isCafeteriasShowing = true;
                    break;
            }




        }

        void CanchaQuerySnapshotHandler(Firebase.CloudFirestore.QuerySnapshot snapshot, NSError error)
        {
            if (error != null)
            {
                System.Console.WriteLine($"Error getting documents: {error.LocalizedDescription}");
                return;
            }
            Canchas = new List<Cancha>();
            foreach (var document in snapshot?.Documents)
            {

                NSDictionary dictCanchas = document.Data;
                Cancha cancha = new Cancha();
                cancha.Nombre = $"{dictCanchas["nombre"]}";
                var ubicacion = dictCanchas["ubicacion"] as Firebase.CloudFirestore.GeoPoint;
                cancha.Lat = ubicacion.Latitude;
                cancha.Long = ubicacion.Longitude;

                mGLMap.WeakDelegate = this;


                var anotation = new MGLPointAnnotation()
                {
                    Title = cancha.Nombre,
                    Coordinate = new CLLocationCoordinate2D(cancha.Lat, cancha.Long)
                };

                Canchas.Add(cancha);
                CanchasMarkers.Add(anotation);
            } 

        }

        void AsistenciaQuerySnapshotHandler(Firebase.CloudFirestore.QuerySnapshot snapshot, NSError error)
        {
        
        }

        void BanioQuerySnapshotHandler(Firebase.CloudFirestore.QuerySnapshot snapshot, NSError error)
        {

        }

        void CafeteriaQuerySnapshotHandler(Firebase.CloudFirestore.QuerySnapshot snapshot, NSError error)
        {

        }


    }
}
